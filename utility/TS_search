#!/usr/bin/perl -w
use strict; use warnings;
use lib $ENV{'AARON'};
use lib $ENV{'PERL_LIB'};

my $AARON = $ENV{'AARON'};

use Getopt::Long;
use Pod::Usage;
use Constants qw(:SYSTEM :JOB_FILE);
use AaronInit qw($template_job);

use Pod::Usage;
use Getopt::Long;
use Data::Dumper;

my $helpMsg = "\nThis utility is used to search a TS structure from the .xyz file\n".
              "The .xyz file is a guessed transition state.\n".
              "This utility uses the same strategy as AARON.\n".
              "Citation:xxxxx\n";

my $system_ada = ADA;
my $queue_type = $ENV{'QUEUE_TYPE'} ?
                 $ENV{'QUEUE_TYPE'} : $system_ada->{QUEUE};

my $numprocs = $system_ada->{N_PROCS};
my $walltime = $system_ada->{WALL};
my $node = '';
my $help;
my @redundacy;
my $redundacy;

my @argv = @ARGV;

for my $i (0..$#argv) {
    if ($argv[$i] =~ /basis$/ || ($argv[$i] =~ /ecp$/)) {
        $argv[$i+1] = '"' . $argv[$i+1] . '"';
    }
}

GetOptions(
    'wall|w=i' => \$walltime,
    'n_procs|p=i' => \$numprocs,
    'node|n=i' => \$node,
    'help|h' => \$help,
    'restart' => \$redundacy,
    'record' => \$redundacy,
    'method|m=s' => \$redundacy,
    'basis|b=s' => \@redundacy,
    'ecp|e=s' => \@redundacy,
    'chargemult|c=i{2}' => \@redundacy,
    'solvent|s=s' => \$redundacy,
    'pcm=s' => \$redundacy,
    'denfit' => \$redundacy,
    'custom' => \$redundacy,
    'emp_disp' => \$redundacy,
) or pod2usage(
    -exitval => 1,
    -verbose => 1,
);


pod2usage(
    -msg => $helpMsg,
    -exitval => 1,
    -verbose => 1,
) if $help;

my ($input_xyz) = grep { $_ =~ /\.xyz$/ } @ARGV;
$input_xyz or pod2usage(
    -msg => "A xyz file must be provided\n",
    -exitval => 1,
    -verbose => 1,
);
my ($input_name) = $input_xyz =~ /(\S+)\.xyz/;

opendir (DIR, '.') or die "Cannot open current directory:$!\n";
my @files = readdir(DIR);
closedir (DIR);

grep {$_ eq $input_xyz} @files or die "$input_xyz doesn't match any file in the current directory\n";

#make TS_search .job file
my $jobname = $input_name . "_TS_search";
#prepare env variable
my $template_pattern = TEMPLATE_JOB;
my $env_variable = $template_job->{env};

$env_variable =~ s/\Q$template_pattern->{JOB_NAME}/$jobname/g;
$env_variable =~ s/\Q$template_pattern->{WALL_TIME}/$walltime/g;
$env_variable =~ s/\Q$template_pattern->{N_PROCS}/$numprocs/g;
$env_variable =~ s/\Q$template_pattern->{NODE_TYPE}/$node/g;
#remove the formula part
for my $var (sort keys %{ $template_job->{formula} }) {
    my $var_value = eval($template_job->{formula}->{$var});
    $env_variable =~ s/\Q$var/$var_value/g;
}

open JOB, ">$jobname.job" or die "Cannot open $jobname.job file";

print JOB "$env_variable\n";
print JOB "$AARON/utility/_TS_search.pl @argv\n";
print JOB "exit\n";

close JOB;

if($queue_type =~ /LSF/i) {
    if(system("bsub < $jobname.job >& /dev/null")) {
        print "Submission denied!\n";
    }
} elsif($queue_type =~ /Slurm/i) {
    if(system("sbatch $jobname.job >& /dev/null")) { 
        print "Submission denied!\n";
    }
} elsif($queue_type =~ /PBS/i) {
    if(system("qsub $jobname.job >& /dev/null")) { 
        print "Submission denied!\n";
    }
}

