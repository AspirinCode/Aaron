#!/usr/bin/perl -w

use strict;
use lib $ENV{'AARON'};
use lib $ENV{'PERL_LIB'};

use AaronInit qw($W_Key $ligs_subs init_main);
use AaronOutput qw(print_ee);
use AaronTools::G09Out;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;

#my $helpMsg = "\nThis utility helps users to prepare supporting information.\n";
#              "Please run this utility under directory where you run AARON.\n";
#              "Two files will be created, thermochemistry file and geometry file.\n";

my $thermo_file = "thermo_SI.dat";
my $xyz_file = "geometry_SI.xyz";
my $help;
#GetOptions(
#    'help|h' => \$help,
#    'thermo_SI|t' => \$thermo_file,
#    'geometry_SI|g' => \$xyz_file,
#) or pod2usage (
#    -exitval => 1,
#    -verbose => 1 );
#
#pod2usage (
#    -msg => $helpMsg,
#    -exitval => 1,
#    -verbose => 1) if $help;
#
#my ($input_file) = grep { $_ =~ /\.in$/ } @ARGV;
#$input_file or pod2usage (
#    -msg => "A input file must be provided\n",
#    -exitval => 1,
#    -verbose => 0 );

#initiate AARON, reading needed information from command line and input files
init_main();
&analyze_result();
&grab_coords();


sub analyze_result {
   
    my $data = ''; 
    $data .= '=' x 90 . "\n";
    for my $ligand (sort keys %{ $ligs_subs }) {
        $data .= "Thermochemistry data for $ligand:\n";
        $data .= '~' x 90 . "\n";
        my @items = ($ligand, sort keys %{ $ligs_subs->{$ligand}->{substrate} });
        my $jobs = $ligs_subs->{$ligand}->{jobs};
        for my $item (@items) {
            $data .= "$item: ";
            $data .= &_analyze_result($jobs, $item);
            $data .= '~' x 90 . "\n";
        }
        $data .= "\n" . '=' x 90 . "\n";
    }
    open THERMO, ">$thermo_file" or die "Cannot open $thermo_file:$!\n";
    print THERMO $data;
}

sub grab_coords {
    for my $ligand (sort keys %{ $ligs_subs }) {
        my $jobs = $ligs_subs->{$ligand}->{jobs};
        my @items = ($ligand, sort keys %{ $ligs_subs->{$ligand}->{substrate} });

        for my $item (@items) {

            my @geos = grep{ $_ =~ /^$item\// } sort keys %{$jobs};

            for my $geo (@geos) {
                if ($jobs->{$geo}->{conformers}) {
                    for my $cf (sort keys %{ $jobs->{$geo}->{conformers} }) {
                        my $job = $jobs->{$geo}->{conformers}->{$cf};

                        ! @{$job->{thermo}} && do { next;};

                        my $dir = $ligand . '/' . $job->{name};
                        my $name = $job->{name};
                        $name =~ s/\//\./g;
                        my $log_file = $name . ".$job->{step}.log";
                        my $g09_out = new AaronTools::G09Out(file=>"$dir/$log_file");
                        my $geo = $g09_out->geometry();
                        $name =~ s/\./_/g;
                        $geo->{name}=$name;
                        $geo->printXYZ($xyz_file);
                    }
                }
            }
        }
    }
}


sub _analyze_result {

    my ($jobs, $item) = @_;

    my @geo = grep{ $_ =~ /^$item\// } sort keys %{$jobs};

    my @stereo_geo;
    for my $geo (@{ $W_Key->{selectivity} }) {
        if (my @geo_temp = grep {$_ =~ /\/$geo\//i} @geo) {
            push (@stereo_geo, [@geo_temp]);
        }
    }

    my $no_sele;
    unless (@stereo_geo) {
        @stereo_geo = ([@geo]);
        $no_sele = 1;
    }

    my $thermo = {};

    for my $n (0..$#stereo_geo) {
        my $key = $no_sele ? 'NONE' : $W_Key->{selectivity}->[$n];

        $thermo->{$key} = {};
        $thermo->{$key}->{geos} = {};

        my @geos = @{ $stereo_geo[$n] };

        for my $geo (@geos) {
            if ($jobs->{$geo}->{conformers}) {
                $thermo->{$key}->{geos}->{$geo}->{conformers} = {};
                for my $cf (sort keys %{ $jobs->{$geo}->{conformers} }) {
                    my $job = $jobs->{$geo}->{conformers}->{$cf};

                    ! @{$job->{thermo}} && do { next; };

                    $thermo->{$key}->{geos}->{$geo}->{conformers}->{$cf} = [@{ $job->{thermo} }];
                    $thermo->{$key}->{found} = 1;
                }
            }else {
                $thermo->{$key}->{geos}->{$geo}->{thermo} =  [@{ $jobs->{$geo}->{thermo} }];
                if (@{ $jobs->{$geo}->{thermo} } ) {
                    $thermo->{$key}->{found} = 1;
                }
            }
        }
    }
    return print_ee($thermo, 1);
}








