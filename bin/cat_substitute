#!/usr/bin/perl -w

use strict;
use lib $ENV{'AARON'};
use lib $ENV{'PERL_LIB'};

use Getopt::Long;
use Pod::Usage;
use AaronTools::Catalysis;

unshift @INC, ("$ENV{'AARON'}/bin");
require _utils;

sub main {
    my $file = shift;
    my %opt  = @_;

    my $geom = _utils::get_cat($file);
    return 1 unless $geom;

    # debuging
    if (0) {
        foreach my $key ( keys %{$geom} ) {
            print( $key, "\n" );
        }
        print("\n");
        foreach my $item ( @{ $geom->{ligand_atoms} } ) {
            print( $item, " " );
        }
    }

   # perform substitute for each substituent
   # do ligand subsituents first, as these atoms are listed last in the xyz file
   # do substrate substitutions last so we don't mess up ligand atom numbering
    foreach my $sub ( keys %{ $opt{ligand} } ) {

        # if substituent is named, just go ahead and pass that to substitute()
        # if we are using relative numbering, still need to 0-index
        # otherwise, calculate atom position in ligand from absolute index
        my $tmp;
        if ( $sub !~ /^\d+$/ ) {
            $tmp = $sub;
        } elsif ( $opt{relnum} ) {
            $tmp = $sub - 1;
        } else {
            $tmp = $sub - $geom->{ligand_atoms}[0] - 1;
        }
        $geom->substitute( 'ligand', $tmp => $opt{ligand}{$sub} );
    }
    foreach my $sub ( keys %{ $opt{substrate} } ) {

        # still want to pass named substituents as they are
        # relative/absolute numbering is the same for substrate atoms
        # since they come first
        my $tmp;
        if ( $sub !~ /^\d+$/ ) {
            $tmp = $sub;
        } else {
            $tmp = $sub - 1;
        }
        $geom->substitute( 'substrate', $tmp => $opt{substrate}{$sub} );
    }
    $geom->substitute('');

    # Printing
    # prints to STDOUT if $outfile == ''
    print("Saving substituted coords to $opt{outfile}\n") if $opt{outfile};
    $geom->printXYZ( $opt{outfile} );
}

# read in options
my %opt;
my %sublist;
my %liglist;
$opt{substrate} = \%sublist;
$opt{ligand}    = \%liglist;
$opt{outfile}   = '';
GetOptions(
    'help|h'            => \$opt{help},
    'relnum|r'          => \$opt{relnum},
    'substrate|s=s%{,}' => \%sublist,
    'ligand|l=s%{,}'    => \%liglist,
    'output|o:s'        => \$opt{outfile} )
  or pod2usage( {
      -exitval => 1,
      -verbose => 1
  } );
pod2usage(0) if $opt{help};

# need to supply a geometry file
pod2usage( {
        -message => "Please provide one geometry file to substitute",
        -exitval => 1,
        -verbose => 1
    } ) unless ( $#ARGV == 0 );

# target supplied as 1-indexed, Aaron uses 0-indexing

&main( $ARGV[0], %opt );

=pod

=head1 SYNOPSIS

cat_substitute [options] [-l|s target=sub ...] file

=head1 OPTIONS

=over

=item B<-l target=sub>, B<--ligand target=sub>

Replace target (atom or substituent) on ligand with specified substituent

=item B<-s target=sub>, B<--substrate target=sub>

Replace target (atom or substituent) on substrate with specified substituent

=item B<-r>, B<--relnum>

Use relative ligand/substrate based numbering instead of absolute 1-indexed numbering

=item B<-o outfile>, B<--output outfile>

Output to file instead of STDOUT

=item B<-h>, B<--help>

Print this help message and exit

=back

=cut

