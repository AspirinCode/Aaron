#!/usr/bin/perl -w

use strict;
use lib $ENV{'AARON'};
use lib $ENV{'PERL_LIB'};

use Getopt::Long;
use Pod::Usage;
use Math::Trig;
use AaronTools::Geometry;

sub main {
    my $files = shift;
    my %opt   = @_;
    my $angle = $opt{angle};
    my $nrots = 0;

	# set angle if equally spaced rotations was requested
    unless ( $opt{angle} ) {
        $angle = 2 * pi / $opt{nrots};
    }

    while ( $nrots < $opt{nrots} ) {
        # perform rotation for each file
        foreach my $file ( @{$files} ) {
            my $geom = new AaronTools::Geometry();
            $geom->{name} = $file;
            $geom->read_geometry($file);
            unless ( @{ $geom->elements() } ) {
				print{*STDERR}("Couldn't read geometry: $file\n");
				next;
            }

            $geom->rotate( $opt{axis}, $angle );

			# prints to STDOUT if $outfile == '' or saves to infile_rotate-axis-angle.xyz
            my $outfile = '';
            if ( $opt{write} ne '-' ) {
				$outfile = $file;
                $outfile =~ s/.*\/(.*)\..*/$1/;
                if ( $opt{write} ne '' ) {
                    if ( $opt{write} =~ /.*\/$/ ) {
                        $outfile = $opt{write} . $outfile;
                    } else {
                        $outfile = $opt{write} . '/' . $outfile;
                    }
                }
                if ( $opt{radians} ) {
                    $outfile .= '_rotate-' . $opt{axis} . '-' . $angle . '.xyz';
                } else {
                    $outfile .=
                      '_rotate-' . $opt{axis} . '-' . rad2deg($angle) . '.xyz';
                }
                print("Saving rotated coords to $outfile\n");
            }
			unless ($outfile){
				if ( $opt{radians} ) {
					print("Rotated ".$angle/pi."*pi\n");
				}else{
					print("Rotated ".rad2deg($angle)." degrees\n");
				}
			}
            $geom->printXYZ($outfile);
        }
		# increase angle and decrease rotation count
		$nrots += 1;
		if ( $opt{angle} ) {
			$angle += $opt{angle};
		} else {
			$angle = 2 * pi * ( $nrots + 1 ) / $opt{nrots};
		}
    }
}

# read in options
my %opt;
$opt{help}    = '';
$opt{axis}    = '';
$opt{angle}   = 0;
$opt{nrots}   = 1;
$opt{radians} = '';
$opt{write}   = '-';    # '-' indicates no write, '' indicates write to cwd
GetOptions(
    'help|h'    => \$opt{help},
    'axis|x=s'  => \$opt{axis},
    'angle|a:f' => \$opt{angle},
    'nrots|n:i' => \$opt{nrots},
    'radians|r' => \$opt{radians},
    'write|w:s' => \$opt{write} )
  or pod2usage( {
      -exitval => 1,
      -verbose => 1
  } );
pod2usage(0) if $opt{help};

# requiree axis, angle, and original coords
pod2usage( {
        -message =>
          "Please provide an axis, an angle and/or a number of rotations, and at least one file\n",
        -exitval => 1,
        -verbose => 1
    } ) unless ( @ARGV > 0 and $opt{axis} and ( $opt{angle} or $opt{nrots} > 1 ) );

# axis should be cartesian axis
pod2usage( {
        -message => "Rotation axis must be either x, y, or z axis\n",
        -exitval => 1,
        -verbose => 1
    } ) unless ( $opt{axis} =~ m/[xXyYzZ]/ );

# number of rotations should be a positive number (defaults to 1)
pod2usage( {
        -message => "Number of rotations must be a positive integer.\n",
        -exitval => 1,
        -verbose => 1
    } ) if ( $opt{nrots} < 0 );

# angle should be in radians
unless ( $opt{radians} ) {
    $opt{angle} = deg2rad( $opt{angle} );
}

&main( \@ARGV, %opt );

=pod

=head1 SYNOPSIS

rotate [options] -x x|y|z -a angle [-n repeat] file [file2 file3 ...]

rotate [options] -x x|y|z -n rotations file [file2 file3 ...]

=head1 OPTIONS

=over

=item B<-x axis>, B<--axis axis>

 Specify rotation about x, y, or z axis.

=item B<-a angle>, B<--angle angle>

 Specify the angle to rotate.

=item B<-n num>, B<--nrot num>

 If used with --angle specified, repeats the rotation <num> times.
 If used without --angle specified, performs <num> equally spaced rotations (implies angle=360/num).

=item B<-r>, B<--radians>

 Angle specified in radians (default is degrees)

=item B<-w [directory]>, B<--write [directory]>

 Write new geometry output to xyz file instead of STDOUT
 File name will be: <infile_name>_rotate-<axis>-<angle>.xyz
 Directory defaults to current working directory

=item B<-h>, B<--help>

 Print this help message and exit

=back

=cut

